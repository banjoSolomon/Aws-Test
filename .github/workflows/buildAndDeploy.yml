name: Deploy Dockerhub and AWS EC2

on:
  push:
    branches:
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Package
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t solomon11/testing:latest .

      - name: Push Docker image to Docker Hub
        run: docker push solomon11/testing:latest

      - name: Create AWS EC2 Key Pair
        id: create_key_pair
        run: |
          # Generate a key pair
          aws ec2 create-key-pair --key-name MyDynamicKey --query 'KeyMaterial' --output text > MyDynamicKey.pem
          
          # Set correct permissions for the key file
          chmod 400 MyDynamicKey.pem

      - name: Provision AWS EC2 Instance
        run: |
          # Create EC2 instance using the newly created Key Pair
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0c55b159cbfafe1f0 --instance-type t2.micro --key-name MyDynamicKey --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Instance}]' --query 'Instances[0].InstanceId' --output text --region ${{ secrets.AWS_REGION }} --aws-access-key-id ${{ secrets.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ secrets.AWS_SECRET_ACCESS_KEY }})

          # Wait until the instance is running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_REGION }}

          # Allocate Elastic IP and associate it with the instance
          ALLOCATION_ID=$(aws ec2 allocate-address --query 'AllocationId' --output text --region ${{ secrets.AWS_REGION }})
          aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ALLOCATION_ID --region ${{ secrets.AWS_REGION }}

          # Get public IP of the instance
          INSTANCE_IP=$(aws ec2 describe-instances --instance-id $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --region ${{ secrets.AWS_REGION }})

      - name: Install Docker on EC2 Instance
        run: |
          # Install Docker using AWS Systems Manager (SSM) Run Command
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands="sudo apt-get update -y && sudo apt-get install docker.io -y" \
            --region ${{ secrets.AWS_REGION }}

      - name: Create .env file on EC2 Instance
        run: |
          # Create the .env file with database credentials using SSM
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands="echo -e 'DATABASE_PASSWORD=nO42mUEPFHVhP7vycanCnSDM8PqbmK3t\nDATABASE_URL=jdbc:postgresql://dpg-cr7hlkqj1k6c739sin10-a.oregon-postgres.render.com/dev_db_fnum\nDATABASE_USERNAME=dev_db_fnum_user' > /home/ubuntu/.env" \
            --region ${{ secrets.AWS_REGION }}

      - name: Run Docker Image on EC2 Instance
        run: |
          # Use SSM to pull and run the Docker image on the EC2 instance
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands="sudo docker pull solomon11/classwork:latest && sudo docker run -d --env-file=/home/ubuntu/.env --name solomon-class-container solomon11/classwork:latest" \
            --region ${{ secrets.AWS_REGION }}
