name: Deploy Dockerhub and AWS EC2

on:
  push:
    branches:
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Package
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t solomon11/testing:latest .

      - name: Push Docker image to Docker Hub
        run: docker push solomon11/testing:latest

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create AWS EC2 Key Pair
        id: create_key_pair
        run: |
          set -e  # Exit on error

          # Generate a unique key pair name
          KEY_PAIR_NAME="MyDynamicKey-$(date +%s)"

          echo "Creating EC2 Key Pair with name $KEY_PAIR_NAME..."
          KEY_MATERIAL=$(aws ec2 create-key-pair --key-name "$KEY_PAIR_NAME" --query 'KeyMaterial' --output text)
          echo "$KEY_MATERIAL" > "$KEY_PAIR_NAME.pem"
          chmod 400 "$KEY_PAIR_NAME.pem"
          echo "Key pair generated and saved as $KEY_PAIR_NAME.pem"
          echo "::set-output name=key-file-path::$KEY_PAIR_NAME.pem"
          echo "::set-output name=key-name::$KEY_PAIR_NAME"

      - name: Provision AWS EC2 Instance
        id: provision_ec2
        run: |
          set -e  # Exit on error

          # Retrieve the key pair name from the previous step
          KEY_PAIR_NAME=${{ steps.create_key_pair.outputs.key-name }}

          # Create EC2 instance using the newly created Key Pair
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.MY_APP_BASE_IMAGE }} \
            --instance-type t3.micro \
            --key-name "$KEY_PAIR_NAME" \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Instance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          # Wait until the instance is running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Get public IP of the instance
          INSTANCE_IP=$(aws ec2 describe-instances --instance-id $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

          echo "EC2 instance is running with IP: $INSTANCE_IP"
          echo "::set-output name=instance-ip::$INSTANCE_IP"
          echo "::set-output name=instance-id::$INSTANCE_ID"

      - name: Install Docker on EC2 Instance
        run: |
          set -e  # Exit on error

          # Use SSM to install Docker
          INSTANCE_ID=${{ steps.provision_ec2.outputs.instance-id }}
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo apt-get update -y", "sudo apt-get install docker.io -y", "sudo systemctl start docker", "sudo systemctl enable docker"]'

      - name: Create .env file on EC2 Instance
        run: |
          set -e  # Exit on error

          # Use SSM to create .env file with database credentials
          INSTANCE_ID=${{ steps.provision_ec2.outputs.instance-id }}
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["echo -e \"DATABASE_PASSWORD=nO42mUEPFHVhP7vycanCnSDM8PqbmK3t\\nDATABASE_URL=jdbc:postgresql://dpg-cr7hlkqj1k6c739sin10-a.oregon-postgres.render.com/dev_db_fnum\\nDATABASE_USERNAME=dev_db_fnum_user\" | sudo tee /home/ubuntu/.env"]'

      - name: Run Docker Image on EC2 Instance
        run: |
          set -e  # Exit on error

          # Use SSM to pull and run the Docker image
          INSTANCE_ID=${{ steps.provision_ec2.outputs.instance-id }}
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo docker pull solomon11/testing:latest", "sudo docker run -d --env-file=/home/ubuntu/.env --name solomon-class-container solomon11/testing:latest"]'
