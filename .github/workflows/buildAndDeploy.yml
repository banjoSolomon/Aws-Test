name: Deploy Dockerhub and AWS EC2

on:
  push:
    branches:
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate SSH Key Pair
        id: generate_ssh_key
        run: |
          set -e  # Exit on error
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "::set-output name=private-key::$(cat ~/.ssh/id_rsa)"
          echo "::set-output name=public-key::$(cat ~/.ssh/id_rsa.pub)"

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create AWS EC2 Key Pair
        id: create_key_pair
        run: |
          set -e  # Exit on error

          # Retrieve and format the public key
          PUBLIC_KEY=$(echo "${{ steps.generate_ssh_key.outputs.public-key }}" | tr -d '\n')

          # Ensure public key is ASCII only
          if echo "$PUBLIC_KEY" | grep -q "[^\x00-\x7F]"; then
            echo "Public key contains non-ASCII characters. Exiting."
            exit 1
          fi

          # Create EC2 key pair using the public key
          KEY_PAIR_NAME="MyDynamicKey-$(date +%s)"
          aws ec2 import-key-pair --key-name "$KEY_PAIR_NAME" --public-key-material "$PUBLIC_KEY"

          # Save private key to file
          echo "${{ steps.generate_ssh_key.outputs.private-key }}" > private_key.pem
          chmod 400 private_key.pem
          echo "::set-output name=key-file-path::private_key.pem"
          echo "::set-output name=key-name::$KEY_PAIR_NAME"

      - name: Create Security Group
        id: create_security_group
        run: |
          set -e  # Exit on error

          # Create a new security group
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name MySecurityGroup --description "Allow SSH access" --query 'GroupId' --output text)

          # Allow inbound SSH access
          aws ec2 authorize-security-group-ingress --group-id "$SECURITY_GROUP_ID" --protocol tcp --port 22 --cidr 0.0.0.0/0

          echo "Security Group ID: $SECURITY_GROUP_ID"
          echo "::set-output name=security-group-id::$SECURITY_GROUP_ID"

      - name: Provision AWS EC2 Instance
        id: provision_ec2
        run: |
          set -e  # Exit on error

          KEY_PAIR_NAME=${{ steps.create_key_pair.outputs.key-name }}
          SECURITY_GROUP_ID=${{ steps.create_security_group.outputs.security-group-id }}

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ secrets.MY_APP_BASE_IMAGE }} \
            --instance-type t3.micro \
            --key-name "$KEY_PAIR_NAME" \
            --security-group-ids "$SECURITY_GROUP_ID" \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Instance}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

          echo "EC2 instance is running with IP: $INSTANCE_IP"
          echo "::set-output name=instance-ip::$INSTANCE_IP"
          echo "::set-output name=instance-id::$INSTANCE_ID"

      - name: Install Docker on EC2 Instance via SSH
        run: |
          set -e  # Exit on error

          INSTANCE_IP=${{ steps.provision_ec2.outputs.instance-ip }}
          PRIVATE_KEY_PATH=${{ steps.create_key_pair.outputs.key-file-path }}

          # Use SSH to install Docker on the instance
          ssh -i "$PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ubuntu@"$INSTANCE_IP" << 'EOF'
            sudo apt-get update -y
            sudo apt-get install docker.io -y
            sudo systemctl start docker
            sudo systemctl enable docker
          EOF

      - name: Create .env file on EC2 Instance via SSH
        run: |
          set -e  # Exit on error

          INSTANCE_IP=${{ steps.provision_ec2.outputs.instance-ip }}
          PRIVATE_KEY_PATH=${{ steps.create_key_pair.outputs.key-file-path }}

          # Use SSH to create .env file with database credentials
          ssh -i "$PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ubuntu@"$INSTANCE_IP" << 'EOF'
            echo -e "DATABASE_PASSWORD=nO42mUEPFHVhP7vycanCnSDM8PqbmK3t\nDATABASE_URL=jdbc:postgresql://dpg-cr7hlkqj1k6c739sin10-a.oregon-postgres.render.com/dev_db_fnum\nDATABASE_USERNAME=dev_db_fnum_user" | sudo tee /home/ubuntu/.env
          EOF

      - name: Run Docker Image on EC2 Instance via SSH
        run: |
          set -e  # Exit on error

          INSTANCE_IP=${{ steps.provision_ec2.outputs.instance-ip }}
          PRIVATE_KEY_PATH=${{ steps.create_key_pair.outputs.key-file-path }}

          # Use SSH to pull and run the Docker image
          ssh -i "$PRIVATE_KEY_PATH" -o StrictHostKeyChecking=no ubuntu@"$INSTANCE_IP" << 'EOF'
            sudo docker pull solomon11/testing:latest
            sudo docker run -d --env-file=/home/ubuntu/.env --name solomon-class-container solomon11/testing:latest
          EOF
